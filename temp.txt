CREATE TABLE restaurants (
restaurant_id SERIAL,
restaurant_name varchar(255) NOT NULL,
restaurant_address_one varchar(255) NOT NULL,
restaurant_address_two varchar(255),
restaurant_address_three varchar(255),
restaurant_address_four varchar(255),
restaurant_address_postcode varchar(255) NOT NULL,
restaurant_average_taste_stars int,
restaurant_average_presentation_stars int,
restaurant_average_friendliness_stars int,
restaurant_average_price_stars int,
restaurant_average_ambience_stars int,
restaurant_average_overall_stars int,
PRIMARY KEY (restaurant_id)
);

INSERT INTO restaurants (restaurant_name, restaurant_address_one, restaurant_address_two, 
restaurant_address_three, restaurant_address_four, restaurant_address_postcode,  
restaurant_average_taste_stars, restaurant_average_presentation_stars, restaurant_average_friendliness_stars, 
restaurant_average_price_stars, restaurant_average_ambience_stars, restaurant_average_overall_stars, user_id) 
VALUES ('TEST_NAME', 'TEST_ADD_ONE', 'TEST_ADD_TWO', 'TEST_ADD_THREE', 'TEST_ADD_FOUR', 'TEST_ADD_POSTCODE', 1, 1, 1, 1, 1, 1, 1);
  
SELECT * FROM restaurants;

CREATE TABLE users (
user_id SERIAL,
email_address varchar (255) NOT NULL,
username varchar(255) NOT NULL,
password varchar(255) NOT NULL,
PRIMARY KEY (user_id)
);

INSERT INTO users (email_address, username, password) VALUES ('TEST_EMAIL', 'TEST_USERNAME', 'TEST_PASSWORD');
SELECT * FROM users;

CREATE TABLE reviews (
review_id SERIAL,
user_id int NOT NULL,
restaurant_id int NOT NULL,
taste_stars int NOT NULL,
presentation_stars int NOT NULL,
friendliness_stars int NOT NULL,
price_stars int NOT NULL,
ambience_stars int NOT NULL,
overall_stars int NOT NULL,
written_review_title varchar (255),
written_review varchar (250),
PRIMARY KEY (review_id)
);

INSERT INTO reviews (user_id, restaurant_id, taste_stars, presentation_stars, friendliness_stars, price_stars, ambience_stars, overall_stars) VALUES (1, 1, 5, 5, 5, 5, 5, 5);
SELECT * FROM reviews;




class Admins(db.Model):
    admin_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    user_id = db.Column(db.Integer, nullable=False)
    admin_password_hash = db.Column(db.String(500), nullable=False)  
    def __repr__(self):
        return self.admin_id


class Restaurants(db.Model):
    restaurant_id = db.Column(db.Integer, primary_key=True)
    restaurant_name = db.Column(db.String(25), nullable=False)
    restaurant_address_one = db.Column(db.String(25), nullable=False)
    restaurant_address_two = db.Column(db.String(25))
    restaurant_address_three = db.Column(db.String(25))
    restaurant_address_four = db.Column(db.String(25))
    restaurant_address_postcode = db.Column(db.String(25), nullable=False)
    restaurant_average_taste_stars = db.Column(db.Float)
    restaurant_average_presentation_stars = db.Column(db.Float)
    restaurant_average_friendliness_stars = db.Column(db.Float)
    restaurant_average_price_stars = db.Column(db.Float)
    restaurant_average_ambience_stars = db.Column(db.Float)
    restaurant_average_overall_stars = db.Column(db.Float)
    restaurant_image_url = db.Column(db.String(500))
    restaurant_date_registered = db.Column(db.DateTime, nullable=False)
  

    def __repr__(self):
        return self.restaurant_id

class Reviews(db.Model):
    review_id = db.Column(db.Integer, primary_key=True)
    taste_stars = db.Column(db.Integer, nullable=False)
    presentation_stars = db.Column(db.Integer, nullable=False)
    friendliness_stars = db.Column(db.Integer, nullable=False)
    price_stars = db.Column(db.Integer, nullable=False)
    ambience_stars = db.Column(db.Integer, nullable=False)
    overall_stars = db.Column(db.Integer, nullable=False)
    written_review_title = db.Column(db.String(25), nullable=False)
    written_review = db.Column(db.String(25), nullable=False)
    restaurant_id = db.Column(db.Integer, db.ForeignKey("restaurants.restaurant_id", ondelete="CASCADE"), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey("users.user_id", 
    ondelete="CASCADE"), nullable=False)
    review_date = db.Column(db.DateTime, nullable=False)
   

    def __repr__(self):
        return self.review_id












        

        

        

       

        

        

        <div class="row  align-center input-row">

<div class="row restaurant-stars-display-row">
                        <div class="col s6 m6 l6 xl6 restaurant-stars-display-col">
                            Overall {{ restaurants.restaurant_overall_stars }}
                        </div>
                        <div class="col s6 m6 l6 xl6 restaurant-stars-display-col">
                            {% if restaurants.restaurant_average_overall_stars %}
                            {% for star_index in range(restaurants.restaurant_average_overall_stars) %}
                            <i class="fa-regular fa-star fa-2xl" style="color: #ede607;"></i>
                            {% endfor %}
                            {% else %}
                            No overall rating available
                            {% endif %}
                        </div>
                    </div